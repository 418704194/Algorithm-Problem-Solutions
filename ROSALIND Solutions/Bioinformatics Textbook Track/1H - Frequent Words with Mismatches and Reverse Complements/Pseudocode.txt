frequent_words_with_mismatches_and_reverse_complements( text, k, d ):
    frequent_patterns = empty list of strings
    neighborhoods = empty list of strings
    for i from 0 to (|text|-k):
        n = neighbors( text[i ... (i+k)], d )
        Add all elements from n to neighborhoods
    rev = reverse_complement(text)
    for i from 0 to (|text|-k):
        n = neighbors( rev[i ... (i+k)], d )
        Add all elements from n to neighborhoods
    nums = array of longs of size |neighborhoods|
    for i from 0 to (|neighborhoods|-1):
        nums[i] = pattern_to_number(neighborhoods[i])
    Sort nums
    count = 1
    max_count = -1
    nums_uniq = empty list of longs
    counts = empty list of integers
    for i from 1 to (|nums|-1):
        if nums[i] == nums[i-1]:
            count = count + 1
        else:
            Add nums[i-1] to nums_uniq
            Add count to counts
            if count > max_count:
                max_count = count
            count = 1
    Add last element of nums to nums_uniq
    Add count to counts
    if count > max_count:
        max_count = count
    out = empty list of strings
    for i from 0 to (|nums_uniq|-1):
        if counts[i] == max_count:
            Add number_to_pattern( nums_uniq[i], k ) to out
    return out

neighbors( pattern, d ):
    out = empty list of strings
    if d == 0:
        Add pattern to out
        return out
    if |pattern| == 1:
        Add 'A', 'C', 'G', and 'T' to out
        return out
    suf = pattern[1...|pattern|]
    suffix_neighbors = neighbors(suf,d)
    for every string "text" in suffix_neighbors:
        if hamming_distance(suf,text) < d:
            Add 'A' + text to out
            Add 'C' + text to out
            Add 'G' + text to out
            Add 'T' + text to out
        else:
            Add (pattern[0] + text) to out
    return out

reverse_complement( dna ):
    out = empty string
    for i from |dna|-1 to 0:
        if dna[i] == 'A': Append 'T' to the end of out
        else if dna[i] == 'T': Append 'A' to the end of out
        else if dna[i] == 'C': Append 'G' to the end of out
        else if dna[i] == 'G': Append 'C' to the end of out
    return out

hamming_distance( p, q ):
    mismatch = 0
    for i from 0 to |p|-1:
        if p[i] != q[i]:
            mismatch = mismatch + 1
    return mismatch

number_to_pattern( index, k ):
    if k == 1:
        return number_to_symbol(index)
    prefix_index = index / 4
    remain = index % 4
    prefix_pattern = number_to_pattern(prefix_index, k-1)
    symbol = number_to_symbol(remainder)
    return (prefix_pattern + symbol)

number_to_symbol( num ):
    if num == 0: return 'A'
    else if num == 1: return 'C'
    else if num == 2: return 'G'
    else if num == 3: return 'T'
    else: return null

symbol_to_number( symbol ):
    if symbol == 'A': return 0
    else if symbol == 'C': return 1
    else if symbol == 'G': return 2
    else if symbol == 'T': return 3
    else: return -1