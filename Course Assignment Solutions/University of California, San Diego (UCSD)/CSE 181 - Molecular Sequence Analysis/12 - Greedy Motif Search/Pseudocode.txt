greedyMotifSearch( k, t, seqs ):
    bestMotifs = null
    bestScore  = -1
    for m from 0 to (|seqs|-k):
        motifs = empty array of Strings of size t
        motifs[0] = seqs[0][m ... (m+k)]
        for i from 1 to (t-1):
            prevMotifs = empty array of Strings of size i
            for x from 0 to (i-1):
                prevMotifs[x] = motifs[x]
            profile = profileFromMotifs(prevMotifs)
            motifs[i] = profileMostProbableKmer(seqs[i],k,profile)
        currScore = scoreMotifs(motifs)
        if currScore > bestScore:
            bestScore = currScore
            bestMotifs = motifs
    return bestMotifs

profileFromMotifs( motifs ):
    profile = matrix of doubles of dimensions 4 (A,C,G,T) by |motifs[0]|
    for seq from 0 to (|motifs|-1):
        curr = motifs[seq]
        for i from 0 to (|curr|-1):
            profile[curr[i]][i] = profile[curr[i]][i] + 1
    for i from 0 to 3:
        for j from 0 to (|profile[0]|-1):
            profile[i][j] = profile[i][j] / |motifs|
    return profile

profileMostProbableKmer( sequence, k, profile ):
    best  = ""
    bestP = -1
    for i from 0 to (|sequence|-k):
        sub = sequence[i ... (i+k)
        prob = 1
        for j from 0 to (|sub|-1):
            prob = prob * profile[sub[j]][j]
        if prob > bestP:
            best  = sub
            bestP = prob
    return best

scoreMotifs( motifs ):
    profile = profileFromMotifs(motifs)
    consensus = ""
    for i from 0 to (|motifs[0]|-1):
        maxProb = -1
        maxChar = null
        for j from 0 to 3:
            if profile[j][i] > maxProb:
                maxProb = profile[j][i]
                maxChar = nucleotide(i)
        consensus = consensus + maxChar
    score = 0
    for i from 0 to (|consensus|-1):
        for j from 0 to (|motifs|-1):
            if motifs[j][i] == consensus[i]:
                score = score + 1
    return score