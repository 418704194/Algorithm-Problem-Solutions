PROGRAM DESCRIPTION
    This project (Shapes) was practice for us to write our own Shape objects so
 that we could implement them with extra functionality. Also, it helped us with
 practice in overriding inherited methods. In easy terms, when classes "extend"
 another class, they essentially become the child of that other class. They get
 any methods written in that class. As can be guessed, usually you want to have
 certain methods be more catered to this new class you've created (such as hash
 methods and equals methods). To make one, you write a method with an identical
 name and parameters, and it will "override" (or replace) the inherited method.
 We created an overarching Shape class and created other shapes that extend the
 Shape class. In other words, they inherit the functionality of Shape.

    If you look through my source code for all the files, you'll see that I put
 "this." infront of any instance variable (variables that are seen in the whole
 shape, not just inside a single method) and any method that's in the class for
 the sake of keeping it clear, even though I do realize that it's not necessary
 to do so for many of the cass that I do it in. Really, if I have some variable
 "var" that is an instance variable, and then inside a method, I create or pass
 another variable named "var," then in THAT case, I need to access the instance
 variable using "this.var" and access the local variable using "var". Again, my
 excessive usage of "this." was for the sake of keeping my code easy to follow.

  TYPES:
     Point:         This is our custom-made Point object. It is similar to the
                    normal Location object. It stores an X and a Y coordinate,
                    as integers. All the shapes use this.
                      Point()
                      Point( Point p )
                      Point(int x, int y)

     Shape:         This is the overarching Shape type. It has a name. The
                    other shapes stem from this.
                      Shape()
                      Shape( String name )

     CSE11_Line:    This is our version of the usual Line type. It has a start
                    and an end point, and is used by other shapes.
                      CSE11_Line()
                      CSE11_Line( CSE11_Line l )
                      CSE11_Line( Point start, Point end )

     Circle:        This is our version of a Circle type. It has a center and a
                    radius, and it can be filled or unfilled.
                      Circle()
                      Circle( Circle c )
                      Circle( Point center, int radius )

     Triangle:      This is a Triangle object. It consists of 3 Point objects
                    that are connected by CSE11_Line objects. It can be filled
                    or unfilled, but Ord dealt with the filling of it in his
                    test program, so we didn't worry about it.
                      Triangle()
                      Triangle( Triangle tri )
                      Triangle( Point p1, Point p2, Point p3 )

     ARectangle:    This is an ARectangle object. It basically is like saying
                    "Quadrilateral," since it is, like the Shape type, an
                    abstract class (other shapes extend from it). It sets up
                    the Square and Rectangle shapes, and it has a point for its
                    "Upper Left Point".
                      ARectangle()
                      ARectangle( ARectangle r )
                      ARectangle( String name, Point upperLeft )
                      ARectangle( String name, int x, int y )
                        -where x and y are the desired coordinates of upperLeft

     Square:        This is a Square object that stems from ARectangle. It has
                    an Upper Left Point and a sidelength. It can be filled or
                    unfilled.
                      Square()
                      Square( Square r )
                      Square( Point upperLeft, int side )
                      Square( int x, int y, int side )
                        -where x and y are the desired coordinates of upperLeft

     Rectangle:     This is a Rectangle object that stems from ARectangle. It
                    has an Upper Left Point, a height, and a width. It can be
                    filled or unfilled.
                      Rectangle()
                      Rectangle( Rectangle r )
                      Rectangle( Point upperLeft, int width, int height )
                      Rectangle( int x, int y, int width, int height )
                        -where x and y are the desired coordinates of upperLeft

     CSE11_Polygon: This is an object that was created for extra credit. It
                    takes in an array of Point objects and connects them via
                    CSE11_Line objects (in order).
                      CSE11_Polygon()
                      CSE11_Polygon( CSE11_Polygon p )
                      CSE11_Polygon( Point[] pts )
                        -where pts is the array of Points in the polygon

  Each shape has a no argument constructor, a copy constructor (deep copy, so
  copy all the internals of the other shape), and a "normal" constructor that
  takes some type of input.

  USAGE: appletviewer TestMickey.html
         (or just view TestMickey.html in a web browser)
           -This runs the TestMickey applet that Ord created to help us test
            our shapes. It just creates a Mickey with 3 circles and prints
            their information.

  USAGE: appletviewer TestHouseWithDelays.html
         (or just view TestHouseWithDelays.html in a web browser)
           -This runs the TestHouseWithDelays applet that Ord created to help
            us test our shapes. It is the main test. It creates a house (green)
            with 2 windows (white), a door (yellow), a doorknob (red), and a
            chimney (red). All parts have black backgrounds, and the windows
            have blue window panes.

  USAGE: appletviewer TestPolygon.html
         (or just view TestPolygon.html in a web browser)
           -This runs the TestPolygon applet that I created to test my extra
            credit CSE11_Polygon object. It generates 3 polygons: the first has
            3 points (a triangle), the second has 4 points, and the third has
            5 points. All of the points are randomly generated, so the shapes
            that are desplayed (and therefore the printed text as well) should
            be completely different upon each run.
