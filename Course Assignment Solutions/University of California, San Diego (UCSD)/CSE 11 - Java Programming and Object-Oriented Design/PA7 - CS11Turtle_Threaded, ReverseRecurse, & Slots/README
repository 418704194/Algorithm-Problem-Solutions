PROGRAM DESCRIPTION
    The first program (Multi-Threaded Turtle Graphics) is a modification of our
 original Turtle Graphics program. Originally, we had written it to write three
 lines: our cs11w** number, the season (winter), and the year (2013). All of it
 is written by just one turtle, so it's pretty slow. Now, the original has been
 modified so that one turtle is created to write each letter, all at once. This
 causes an incredible speed-up, as can be seen when the program is run.

  USAGE: java -cp ./turtleClasses.jar:. CS11Turtle_Threaded


    The second program (Reverse-Recurse) reads integer values from the keyboard
 into an array of a size specified by the user beforehand (less integers can be
 entered than were specified, but not more) and reverses all of the elements of
 the array via two different recursive methods. The first directly modifies the
 original array. The second returns a new array with the elements reversed thus
 preserving the original array. Both will use an "ends-and-middle" recursion. A
 simpler way to put it: The 2 outside elements will be swapped, then the next 2
 inner ones, then the next 2, so on, until the center 2 elements are swapped so
 that the user ends up with a reversed array.

  USAGE: java TestReverseRecurse


    The third program (Slot Machine Simulator) simulates a slot machine, as can
 be expected. The user simply clicks on the "Click to Spin" button, and when it
 is clicked, the wheels spin. They will stop after a while in a way just like a
 real slot machine. In short, the name says it all.

  USAGE: appletviewer Slots.html
         (or just view Slots.html in a web browser)

  On Start:   Show header, the three Slot Wheels, and the Spin button

  On Click:   If "Click to Spin" is clicked, start Slot Machine simulation
              (spin wheels, and they'll stop soon, like a slot machine)


SHORT RESPONSE QUESTIONS
 1. In vim/gvim, to set the number of spaces to indent with each indent level,
    we must first set the indent level to 2:
      :set shiftwidth=2

    For our purposes, since we like using spaces instead of actual "tabs," we
    can optionally set vim to insert spaces instead of an actual tab:
      :set expandtab

    Now that we have our indent level set, when we're in the normal starting
    mode in vim, we type this to indent a certain number of lines, starting
    from the cursor:
      (# Lines)>>
    For example, to indent 5 lines, starting from the cursor:
      5>>

 2. In vim/gvim, to indent an entire curly-bracket block one level while the
    cursor is currently on either the open or close curly bracket of the block:
      >%

    To de-indent an entire curly-bracket block one level while the cursor is
    currently on either the open or close curly bracket of the block:
      <%

    Use this in the normal starting mode in vim.

 3. To open a new line below the cursor and enter Insert Mode in one step, type
    this when in the normal starting mode of vim:
      o

    Keep in mind that the 'o' is lowercase; if you type in 'O' (upper-case)
    instead, it'll do the same thing, but ABOVE the cursor instead.

 4. On the Unix command line, to redirect a program's output into a file:
      *program* > *filename*

    For example, to run the Reverse-Recurse program and redirect its output to
    a file called "output.txt":
      java TestReverseRecurse > output.txt

 5. To create an array of ints in Java and initialize it with the values of all
    single digit odd positive numbets (between 0-9) all in one step/line:
      int[] array = {1, 3, 5, 7, 9};
